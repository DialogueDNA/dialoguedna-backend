from typing import Protocol

from app.logic.DialogueDNA.events import StageEvent, QueuedEvent, StoppedEvent, ProcessingEvent, TranscriptionEvent, \
    FailedEvent, EmotionsEvent, SummaryEvent
from app.logic.DialogueDNA.interfaces.capabilities import PipelineContext


class PipelineListener(Protocol):
    def on_stage(self, e: StageEvent, ctx: PipelineContext) -> None: ...
    def on_transcription_queued(self, e: QueuedEvent, ctx: PipelineContext) -> None: ...
    def on_transcription_stopped(self, e: StoppedEvent, ctx: PipelineContext) -> None: ...
    def on_transcription_processing(self, e: ProcessingEvent, ctx: PipelineContext) -> None: ...
    def on_transcription_ready(self, e: TranscriptionEvent, ctx: PipelineContext) -> None: ...
    def on_transcription_failed(self, e: FailedEvent, ctx: PipelineContext) -> None: ...
    def on_emotion_analyzation_queued(self, e: QueuedEvent, ctx: PipelineContext) -> None: ...
    def on_emotion_analyzation_stopped(self, e: StoppedEvent, ctx: PipelineContext) -> None: ...
    def on_emotion_analyzation_processing(self, e: ProcessingEvent, ctx: PipelineContext) -> None: ...
    def on_emotion_analyzation_ready(self, e: EmotionsEvent, ctx: PipelineContext) -> None: ...
    def on_emotion_analyzation_failed(self, e: FailedEvent, ctx: PipelineContext) -> None: ...
    def on_summarization_queued(self, e: QueuedEvent, ctx: PipelineContext) -> None: ...
    def on_summarization_stopped(self, e: StoppedEvent, ctx: PipelineContext) -> None: ...
    def on_summarization_processing(self, e: ProcessingEvent, ctx: PipelineContext) -> None: ...
    def on_summarization_ready(self, e: SummaryEvent, ctx: PipelineContext) -> None: ...
    def on_summarization_failed(self, e: FailedEvent, ctx: PipelineContext) -> None: ...
